{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\7G3P\\\\reactNodeProjects\\\\Frontend-Assignment\\\\reddit-saves-project\\\\src\\\\favourites.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport PostList from './Components/postListings.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function storageAvailable(type) {\n  var storage;\n\n  try {\n    storage = window[type];\n    var x = '__storage_test__';\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return true;\n  } catch (e) {\n    return e instanceof DOMException && ( // everything except Firefox\n    e.code === 22 || // Firefox\n    e.code === 1014 || // test name field too, because code might not be present\n    // everything except Firefox\n    e.name === 'QuotaExceededError' || // Firefox\n    e.name === 'NS_ERROR_DOM_QUOTA_REACHED') && // acknowledge QuotaExceededError only if there's something already stored\n    storage && storage.length !== 0;\n  }\n}\n\nconst FavouritePosts = () => {\n  _s();\n\n  const defaultKeyName = \"FavPost\";\n  let postUrls;\n  let postsArr = [];\n  const [urlList, setUrlList] = useState([]);\n  const [postList, setPostList] = useState([]);\n\n  if (storageAvailable('localStorage')) {\n    postsArr = postUrls.split(\"}{\");\n    let count = 0;\n\n    for (let i = 0; i < postsArr.length; i++) {\n      if (postsArr[i].localeCompare(url) !== 0) {\n        if (count === postsArr.length - 1) {\n          postsArr = [...postsArr, url.toString()];\n          i++;\n        } else {\n          count++;\n        }\n      }\n    }\n  } else {\n    Window.alert(\"LocalStorage is not available.\");\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(PostList, {\n      postList: postList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n};\n\n_s(FavouritePosts, \"ioa3ibiPn17Hr+n8qPFcBrsxTow=\");\n\n_c = FavouritePosts;\nexport default FavouritePosts;\n\nvar _c;\n\n$RefreshReg$(_c, \"FavouritePosts\");","map":{"version":3,"sources":["C:/Users/7G3P/reactNodeProjects/Frontend-Assignment/reddit-saves-project/src/favourites.js"],"names":["React","useState","useEffect","PostList","storageAvailable","type","storage","window","x","setItem","removeItem","e","DOMException","code","name","length","FavouritePosts","defaultKeyName","postUrls","postsArr","urlList","setUrlList","postList","setPostList","split","count","i","localeCompare","url","toString","Window","alert"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,QAAP,MAAqB,8BAArB;;AAEA,OAAO,SAASC,gBAAT,CAA0BC,IAA1B,EAAgC;AACnC,MAAIC,OAAJ;;AACA,MAAI;AACAA,IAAAA,OAAO,GAAGC,MAAM,CAACF,IAAD,CAAhB;AACA,QAAIG,CAAC,GAAG,kBAAR;AACAF,IAAAA,OAAO,CAACG,OAAR,CAAgBD,CAAhB,EAAmBA,CAAnB;AACAF,IAAAA,OAAO,CAACI,UAAR,CAAmBF,CAAnB;AACA,WAAO,IAAP;AACH,GAND,CAOA,OAAMG,CAAN,EAAS;AACL,WAAOA,CAAC,YAAYC,YAAb,MACH;AACAD,IAAAA,CAAC,CAACE,IAAF,KAAW,EAAX,IACA;AACAF,IAAAA,CAAC,CAACE,IAAF,KAAW,IAFX,IAGA;AACA;AACAF,IAAAA,CAAC,CAACG,IAAF,KAAW,oBALX,IAMA;AACAH,IAAAA,CAAC,CAACG,IAAF,KAAW,4BATR,KAUH;AACCR,IAAAA,OAAO,IAAIA,OAAO,CAACS,MAAR,KAAmB,CAXnC;AAYH;AACJ;;AAED,MAAMC,cAAc,GAAG,MAAM;AAAA;;AACzB,QAAMC,cAAc,GAAG,SAAvB;AACA,MAAIC,QAAJ;AACA,MAAIC,QAAQ,GAAG,EAAf;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBpB,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACqB,QAAD,EAAWC,WAAX,IAA0BtB,QAAQ,CAAC,EAAD,CAAxC;;AAEA,MAAIG,gBAAgB,CAAC,cAAD,CAApB,EAAsC;AAClCe,IAAAA,QAAQ,GAAGD,QAAQ,CAACM,KAAT,CAAe,IAAf,CAAX;AAEQ,QAAIC,KAAK,GAAG,CAAZ;;AACA,SAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGP,QAAQ,CAACJ,MAA5B,EAAmCW,CAAC,EAApC,EAAuC;AACnC,UAAIP,QAAQ,CAACO,CAAD,CAAR,CAAYC,aAAZ,CAA0BC,GAA1B,MAAmC,CAAvC,EACA;AACI,YAAIH,KAAK,KAAKN,QAAQ,CAACJ,MAAT,GAAkB,CAAhC,EAAkC;AAC9BI,UAAAA,QAAQ,GAAG,CAAC,GAAGA,QAAJ,EAAcS,GAAG,CAACC,QAAJ,EAAd,CAAX;AACAH,UAAAA,CAAC;AACJ,SAHD,MAII;AACAD,UAAAA,KAAK;AACR;AACJ;AACJ;AACZ,GAhBD,MAiBK;AACDK,IAAAA,MAAM,CAACC,KAAP,CAAa,gCAAb;AACH;;AAGD,sBACI;AAAA,2BACI,QAAC,QAAD;AACA,MAAA,QAAQ,EAAET;AADV;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH,CApCD;;GAAMN,c;;KAAAA,c;AAsCN,eAAeA,cAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport PostList from './Components/postListings.js';\r\n\r\nexport function storageAvailable(type) {\r\n    var storage;\r\n    try {\r\n        storage = window[type];\r\n        var x = '__storage_test__';\r\n        storage.setItem(x, x);\r\n        storage.removeItem(x);\r\n        return true;\r\n    }\r\n    catch(e) {\r\n        return e instanceof DOMException && (\r\n            // everything except Firefox\r\n            e.code === 22 ||\r\n            // Firefox\r\n            e.code === 1014 ||\r\n            // test name field too, because code might not be present\r\n            // everything except Firefox\r\n            e.name === 'QuotaExceededError' ||\r\n            // Firefox\r\n            e.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&\r\n            // acknowledge QuotaExceededError only if there's something already stored\r\n            (storage && storage.length !== 0);\r\n    }\r\n}\r\n\r\nconst FavouritePosts = () => {\r\n    const defaultKeyName = \"FavPost\";\r\n    let postUrls;\r\n    let postsArr = [];\r\n    const [urlList, setUrlList] = useState([]);\r\n    const [postList, setPostList] = useState([]);\r\n\r\n    if (storageAvailable('localStorage')) {\r\n        postsArr = postUrls.split(\"}{\");\r\n\r\n                let count = 0;\r\n                for(let i = 0; i < postsArr.length;i++){\r\n                    if (postsArr[i].localeCompare(url) !== 0)\r\n                    {\r\n                        if (count === postsArr.length - 1){\r\n                            postsArr = [...postsArr, url.toString()];\r\n                            i++;\r\n                        }\r\n                        else{\r\n                            count++;\r\n                        }\r\n                    }\r\n                }\r\n    }\r\n    else {\r\n        Window.alert(\"LocalStorage is not available.\");\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <PostList \r\n            postList={postList}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FavouritePosts;"]},"metadata":{},"sourceType":"module"}