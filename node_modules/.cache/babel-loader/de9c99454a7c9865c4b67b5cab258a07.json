{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\7G3P\\\\reactNodeProjects\\\\Frontend-Assignment\\\\reddit-saves-project\\\\src\\\\favourites.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport PostList from './Components/postListings.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function storageAvailable(type) {\n  var storage;\n\n  try {\n    storage = window[type];\n    var x = '__storage_test__';\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return true;\n  } catch (e) {\n    return e instanceof DOMException && ( // everything except Firefox\n    e.code === 22 || // Firefox\n    e.code === 1014 || // test name field too, because code might not be present\n    // everything except Firefox\n    e.name === 'QuotaExceededError' || // Firefox\n    e.name === 'NS_ERROR_DOM_QUOTA_REACHED') && // acknowledge QuotaExceededError only if there's something already stored\n    storage && storage.length !== 0;\n  }\n}\n\nString.prototype.replaceAt = function (index, replacement) {\n  return this.substr(0, index) + replacement + this.substr(index + replacement.length);\n};\n\nconst FavouritePosts = () => {\n  _s();\n\n  const defaultKeyName = \"FavPost\";\n  let postUrls;\n  let postsArr = [];\n  const [urlList, setUrlList] = useState([]);\n  const [postList, setPostList] = useState([]);\n\n  if (storageAvailable('localStorage')) {\n    postUrls = localStorage.getItem(defaultKeyName);\n\n    if (postUrls !== null) {\n      postsArr = postUrls.split(\"}{\");\n\n      for (let i = 1; i < postsArr.length; i++) {\n        let query = \"\";\n        query = postsArr[i].replaceAt(postsArr[i].length - 1, \".json\");\n        fetch(query).then(res => {\n          let tempPost = res.json();\n          console.log(tempPost[0]); //setPostList([...postList, tempPost]);\n        }).catch(error => {\n          console.log(\"***ERROR: \" + error);\n        });\n      }\n\n      console.log(postList);\n    }\n  } else {\n    Window.alert(\"LocalStorage is not available.\");\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(PostList, {\n      postList: postList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n};\n\n_s(FavouritePosts, \"ioa3ibiPn17Hr+n8qPFcBrsxTow=\");\n\n_c = FavouritePosts;\nexport default FavouritePosts;\n\nvar _c;\n\n$RefreshReg$(_c, \"FavouritePosts\");","map":{"version":3,"sources":["C:/Users/7G3P/reactNodeProjects/Frontend-Assignment/reddit-saves-project/src/favourites.js"],"names":["React","useState","useEffect","PostList","storageAvailable","type","storage","window","x","setItem","removeItem","e","DOMException","code","name","length","String","prototype","replaceAt","index","replacement","substr","FavouritePosts","defaultKeyName","postUrls","postsArr","urlList","setUrlList","postList","setPostList","localStorage","getItem","split","i","query","fetch","then","res","tempPost","json","console","log","catch","error","Window","alert"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport PostList from './Components/postListings.js';\r\n\r\nexport function storageAvailable(type) {\r\n    var storage;\r\n    try {\r\n        storage = window[type];\r\n        var x = '__storage_test__';\r\n        storage.setItem(x, x);\r\n        storage.removeItem(x);\r\n        return true;\r\n    }\r\n    catch(e) {\r\n        return e instanceof DOMException && (\r\n            // everything except Firefox\r\n            e.code === 22 ||\r\n            // Firefox\r\n            e.code === 1014 ||\r\n            // test name field too, because code might not be present\r\n            // everything except Firefox\r\n            e.name === 'QuotaExceededError' ||\r\n            // Firefox\r\n            e.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&\r\n            // acknowledge QuotaExceededError only if there's something already stored\r\n            (storage && storage.length !== 0);\r\n    }\r\n}\r\n\r\nString.prototype.replaceAt = function(index, replacement) {\r\n    return this.substr(0, index) + replacement + this.substr(index + replacement.length);\r\n}\r\n\r\nconst FavouritePosts = () => {\r\n    const defaultKeyName = \"FavPost\";\r\n    let postUrls;\r\n    let postsArr = [];\r\n    const [urlList, setUrlList] = useState([]);\r\n    const [postList, setPostList] = useState([]);\r\n\r\n    if (storageAvailable('localStorage')) {\r\n        postUrls = localStorage.getItem(defaultKeyName);\r\n\r\n        if (postUrls !== null){\r\n                postsArr = postUrls.split(\"}{\");\r\n\r\n            for (let i = 1; i < postsArr.length;i++){\r\n                let query = \"\";\r\n\r\n                query = postsArr[i].replaceAt(postsArr[i].length - 1, \".json\");\r\n\r\n                fetch(query)\r\n                .then((res) => {\r\n                    let tempPost = res.json();\r\n                    console.log(tempPost[0]);\r\n                    //setPostList([...postList, tempPost]);\r\n                })\r\n                .catch((error) => {\r\n                    console.log(\"***ERROR: \" + error);\r\n                })\r\n            }\r\n\r\n            console.log(postList);\r\n        }\r\n    }\r\n    else {\r\n        Window.alert(\"LocalStorage is not available.\");\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <PostList \r\n            postList={postList}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FavouritePosts;"]},"metadata":{},"sourceType":"module"}