{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\7G3P\\\\reactNodeProjects\\\\Frontend-Assignment\\\\reddit-saves-project\\\\src\\\\favourites.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport PostList from './Components/postListings.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction storageAvailable(type) {\n  var storage;\n\n  try {\n    storage = window[type];\n    var x = '__storage_test__';\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return true;\n  } catch (e) {\n    return e instanceof DOMException && ( // everything except Firefox\n    e.code === 22 || // Firefox\n    e.code === 1014 || // test name field too, because code might not be present\n    // everything except Firefox\n    e.name === 'QuotaExceededError' || // Firefox\n    e.name === 'NS_ERROR_DOM_QUOTA_REACHED') && // acknowledge QuotaExceededError only if there's something already stored\n    storage && storage.length !== 0;\n  }\n}\n\nexport const SavePostToFavourites = postUrl => {\n  _s();\n\n  const defaultKeyName = \"FavPost\";\n  let numOfSavedPosts = 0;\n  const [query, setQuery] = useState(\"\");\n  const [urlList, setUrlList] = useState([]);\n  const [postList, setPostList] = useState([]);\n\n  if (storageAvailable('localStorage')) {\n    if (localStorage.getItem(defaultKeyName) === null) {\n      localStorage.setItem(defaultKeyName, numOfSavedPosts);\n    } else {\n      numOfSavedPosts = parseInt(localStorage.getItem(defaultKeyName));\n    } // Save the\n\n\n    localStorage.setItem(defaultKeyName + numOfSavedPosts + 1, postUrl);\n    numOfSavedPosts++;\n    localStorage.setItem(defaultKeyName, numOfSavedPosts);\n  } else {\n    Window.alert(\"LocalStorage is not available.\");\n  }\n};\n\n_s(SavePostToFavourites, \"2H/ZgLjXFrJp0dNR9PkA1BrM/ok=\");\n\n_c = SavePostToFavourites;\n\nconst FavouritePosts = () => {\n  _s2();\n\n  const defaultKeyName = \"FavPost\";\n  let numOfSavedPosts = 0;\n  const [query, setQuery] = useState(\"\");\n  const [urlList, setUrlList] = useState([]);\n  const [postList, setPostList] = useState([{\n    url: \"\"\n  }]);\n\n  if (storageAvailable('localStorage')) {\n    if (localStorage.getItem(defaultKeyName) === null) {\n      localStorage.setItem(defaultKeyName, numOfSavedPosts);\n    } else {\n      numOfSavedPosts = parseInt(localStorage.getItem(defaultKeyName));\n    }\n\n    for (let i = 0; i < numOfSavedPosts; i++) {\n      if (null !== localStorage.getItem(defaultKeyName + i.toString())) {\n        setUrlList([...urlList, localStorage.getItem(defaultKeyName + i.toString())]);\n      }\n    }\n  } else {\n    Window.alert(\"LocalStorage is not available.\");\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(PostList, {\n      postList: postList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 9\n  }, this);\n};\n\n_s2(FavouritePosts, \"xhoQbKRgCuuLS64aK7xjnLAiO+w=\");\n\n_c2 = FavouritePosts;\nexport default FavouritePosts;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"SavePostToFavourites\");\n$RefreshReg$(_c2, \"FavouritePosts\");","map":{"version":3,"sources":["C:/Users/7G3P/reactNodeProjects/Frontend-Assignment/reddit-saves-project/src/favourites.js"],"names":["React","useState","useEffect","PostList","storageAvailable","type","storage","window","x","setItem","removeItem","e","DOMException","code","name","length","SavePostToFavourites","postUrl","defaultKeyName","numOfSavedPosts","query","setQuery","urlList","setUrlList","postList","setPostList","localStorage","getItem","parseInt","Window","alert","FavouritePosts","url","i","toString"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport PostList from './Components/postListings.js';\r\n\r\nfunction storageAvailable(type) {\r\n    var storage;\r\n    try {\r\n        storage = window[type];\r\n        var x = '__storage_test__';\r\n        storage.setItem(x, x);\r\n        storage.removeItem(x);\r\n        return true;\r\n    }\r\n    catch(e) {\r\n        return e instanceof DOMException && (\r\n            // everything except Firefox\r\n            e.code === 22 ||\r\n            // Firefox\r\n            e.code === 1014 ||\r\n            // test name field too, because code might not be present\r\n            // everything except Firefox\r\n            e.name === 'QuotaExceededError' ||\r\n            // Firefox\r\n            e.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&\r\n            // acknowledge QuotaExceededError only if there's something already stored\r\n            (storage && storage.length !== 0);\r\n    }\r\n}\r\n\r\nexport const SavePostToFavourites = (postUrl) => {\r\n    const defaultKeyName = \"FavPost\";\r\n    let numOfSavedPosts = 0;\r\n    const [query, setQuery] = useState(\"\");\r\n    const [urlList, setUrlList] = useState([]);\r\n    const [postList, setPostList] = useState([]);\r\n\r\n    if (storageAvailable('localStorage')) {\r\n        if(localStorage.getItem(defaultKeyName) === null){\r\n            localStorage.setItem(defaultKeyName, numOfSavedPosts);\r\n        }\r\n        else{\r\n            numOfSavedPosts = parseInt(localStorage.getItem(defaultKeyName));\r\n        }\r\n\r\n        // Save the\r\n        localStorage.setItem(defaultKeyName + numOfSavedPosts + 1, postUrl);\r\n        numOfSavedPosts++;\r\n        localStorage.setItem(defaultKeyName, numOfSavedPosts);\r\n    }\r\n    else {\r\n        Window.alert(\"LocalStorage is not available.\");\r\n    }\r\n}\r\n\r\nconst FavouritePosts = () => {\r\n    const defaultKeyName = \"FavPost\";\r\n    let numOfSavedPosts = 0;\r\n    const [query, setQuery] = useState(\"\");\r\n    const [urlList, setUrlList] = useState([]);\r\n    const [postList, setPostList] = useState([{\r\n        url: \"\",\r\n    }]);\r\n\r\n    if (storageAvailable('localStorage')) {\r\n        if(localStorage.getItem(defaultKeyName) === null){\r\n            localStorage.setItem(defaultKeyName, numOfSavedPosts);\r\n        }\r\n        else{\r\n            numOfSavedPosts = parseInt(localStorage.getItem(defaultKeyName));\r\n        }\r\n\r\n        for (let i = 0; i < numOfSavedPosts; i++){\r\n            if (null !== localStorage.getItem(defaultKeyName + i.toString())){\r\n                setUrlList([...urlList, localStorage.getItem(defaultKeyName + i.toString())]);\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        Window.alert(\"LocalStorage is not available.\");\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <PostList \r\n            postList={postList}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FavouritePosts;"]},"metadata":{},"sourceType":"module"}