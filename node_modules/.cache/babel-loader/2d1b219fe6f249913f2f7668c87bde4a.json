{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\7G3P\\\\reactNodeProjects\\\\Frontend-Assignment\\\\reddit-saves-project\\\\src\\\\favourites.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport PostList from './Components/postListings.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function storageAvailable(type) {\n  var storage;\n\n  try {\n    storage = window[type];\n    var x = '__storage_test__';\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return true;\n  } catch (e) {\n    return e instanceof DOMException && ( // everything except Firefox\n    e.code === 22 || // Firefox\n    e.code === 1014 || // test name field too, because code might not be present\n    // everything except Firefox\n    e.name === 'QuotaExceededError' || // Firefox\n    e.name === 'NS_ERROR_DOM_QUOTA_REACHED') && // acknowledge QuotaExceededError only if there's something already stored\n    storage && storage.length !== 0;\n  }\n}\nexport function SavePostToFavourites(postUrl) {\n  _s();\n\n  const defaultKeyName = \"FavPost\";\n  let postUrls;\n  const [URLList, setURLList] = useState([]);\n\n  if (storageAvailable('localStorage')) {\n    // Pulls the current favourites list from the localStorage\n    postUrls = localStorage.getItem(defaultKeyName);\n\n    if (postUrls !== null) {\n      setURLList(postUrls.split(\"}{\")); //\n\n      setURLList([...URLList, postUrl]); // Save the new favourites list to localStorage\n\n      localStorage.setItem(defaultKeyName, URLList.join(\"}{\"));\n    }\n  } else {\n    Window.alert(\"LocalStorage is not available.\");\n  }\n}\n\n_s(SavePostToFavourites, \"BucbHec1uEjKbXGWJsXOfsg4Qew=\");\n\n_c = SavePostToFavourites;\n\nconst FavouritePosts = () => {\n  _s2();\n\n  const defaultKeyName = \"FavPost\";\n  let postUrls;\n  const [urlList, setUrlList] = useState([]);\n  const [postList, setPostList] = useState([]);\n\n  if (storageAvailable('localStorage')) {\n    postUrls = localStorage.getItem(defaultKeyName);\n\n    if (postUrls !== null) {\n      setUrlList(postUrls.split(\"}{\"));\n    }\n  } else {\n    Window.alert(\"LocalStorage is not available.\");\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(PostList, {\n      postList: postList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n};\n\n_s2(FavouritePosts, \"ioa3ibiPn17Hr+n8qPFcBrsxTow=\");\n\n_c2 = FavouritePosts;\nexport default FavouritePosts;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"SavePostToFavourites\");\n$RefreshReg$(_c2, \"FavouritePosts\");","map":{"version":3,"sources":["C:/Users/7G3P/reactNodeProjects/Frontend-Assignment/reddit-saves-project/src/favourites.js"],"names":["React","useState","useEffect","PostList","storageAvailable","type","storage","window","x","setItem","removeItem","e","DOMException","code","name","length","SavePostToFavourites","postUrl","defaultKeyName","postUrls","URLList","setURLList","localStorage","getItem","split","join","Window","alert","FavouritePosts","urlList","setUrlList","postList","setPostList"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,QAAP,MAAqB,8BAArB;;AAEA,OAAO,SAASC,gBAAT,CAA0BC,IAA1B,EAAgC;AACnC,MAAIC,OAAJ;;AACA,MAAI;AACAA,IAAAA,OAAO,GAAGC,MAAM,CAACF,IAAD,CAAhB;AACA,QAAIG,CAAC,GAAG,kBAAR;AACAF,IAAAA,OAAO,CAACG,OAAR,CAAgBD,CAAhB,EAAmBA,CAAnB;AACAF,IAAAA,OAAO,CAACI,UAAR,CAAmBF,CAAnB;AACA,WAAO,IAAP;AACH,GAND,CAOA,OAAMG,CAAN,EAAS;AACL,WAAOA,CAAC,YAAYC,YAAb,MACH;AACAD,IAAAA,CAAC,CAACE,IAAF,KAAW,EAAX,IACA;AACAF,IAAAA,CAAC,CAACE,IAAF,KAAW,IAFX,IAGA;AACA;AACAF,IAAAA,CAAC,CAACG,IAAF,KAAW,oBALX,IAMA;AACAH,IAAAA,CAAC,CAACG,IAAF,KAAW,4BATR,KAUH;AACCR,IAAAA,OAAO,IAAIA,OAAO,CAACS,MAAR,KAAmB,CAXnC;AAYH;AACJ;AAED,OAAO,SAASC,oBAAT,CAA8BC,OAA9B,EAAuC;AAAA;;AAC1C,QAAMC,cAAc,GAAG,SAAvB;AACA,MAAIC,QAAJ;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBpB,QAAQ,CAAC,EAAD,CAAtC;;AAEA,MAAIG,gBAAgB,CAAC,cAAD,CAApB,EAAsC;AAClC;AACAe,IAAAA,QAAQ,GAAGG,YAAY,CAACC,OAAb,CAAqBL,cAArB,CAAX;;AAEA,QAAIC,QAAQ,KAAK,IAAjB,EAAsB;AAClBE,MAAAA,UAAU,CAACF,QAAQ,CAACK,KAAT,CAAe,IAAf,CAAD,CAAV,CADkB,CAGlB;;AACAH,MAAAA,UAAU,CAAC,CAAC,GAAGD,OAAJ,EAAaH,OAAb,CAAD,CAAV,CAJkB,CAMlB;;AACAK,MAAAA,YAAY,CAACb,OAAb,CAAqBS,cAArB,EAAqCE,OAAO,CAACK,IAAR,CAAa,IAAb,CAArC;AACH;AACJ,GAbD,MAcK;AACDC,IAAAA,MAAM,CAACC,KAAP,CAAa,gCAAb;AACH;AACJ;;GAtBeX,oB;;KAAAA,oB;;AAwBhB,MAAMY,cAAc,GAAG,MAAM;AAAA;;AACzB,QAAMV,cAAc,GAAG,SAAvB;AACA,MAAIC,QAAJ;AACA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwB7B,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAAC8B,QAAD,EAAWC,WAAX,IAA0B/B,QAAQ,CAAC,EAAD,CAAxC;;AAEA,MAAIG,gBAAgB,CAAC,cAAD,CAApB,EAAsC;AAClCe,IAAAA,QAAQ,GAAGG,YAAY,CAACC,OAAb,CAAqBL,cAArB,CAAX;;AACA,QAAIC,QAAQ,KAAK,IAAjB,EACA;AACIW,MAAAA,UAAU,CAACX,QAAQ,CAACK,KAAT,CAAe,IAAf,CAAD,CAAV;AACH;AACJ,GAND,MAOK;AACDE,IAAAA,MAAM,CAACC,KAAP,CAAa,gCAAb;AACH;;AAGD,sBACI;AAAA,2BACI,QAAC,QAAD;AACA,MAAA,QAAQ,EAAEI;AADV;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH,CAzBD;;IAAMH,c;;MAAAA,c;AA2BN,eAAeA,cAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport PostList from './Components/postListings.js';\r\n\r\nexport function storageAvailable(type) {\r\n    var storage;\r\n    try {\r\n        storage = window[type];\r\n        var x = '__storage_test__';\r\n        storage.setItem(x, x);\r\n        storage.removeItem(x);\r\n        return true;\r\n    }\r\n    catch(e) {\r\n        return e instanceof DOMException && (\r\n            // everything except Firefox\r\n            e.code === 22 ||\r\n            // Firefox\r\n            e.code === 1014 ||\r\n            // test name field too, because code might not be present\r\n            // everything except Firefox\r\n            e.name === 'QuotaExceededError' ||\r\n            // Firefox\r\n            e.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&\r\n            // acknowledge QuotaExceededError only if there's something already stored\r\n            (storage && storage.length !== 0);\r\n    }\r\n}\r\n\r\nexport function SavePostToFavourites(postUrl) {\r\n    const defaultKeyName = \"FavPost\";\r\n    let postUrls;\r\n    const [URLList, setURLList] = useState([]);\r\n\r\n    if (storageAvailable('localStorage')) {\r\n        // Pulls the current favourites list from the localStorage\r\n        postUrls = localStorage.getItem(defaultKeyName);\r\n\r\n        if (postUrls !== null){\r\n            setURLList(postUrls.split(\"}{\"));\r\n\r\n            //\r\n            setURLList([...URLList, postUrl]);\r\n\r\n            // Save the new favourites list to localStorage\r\n            localStorage.setItem(defaultKeyName, URLList.join(\"}{\"));\r\n        }\r\n    }\r\n    else {\r\n        Window.alert(\"LocalStorage is not available.\");\r\n    }\r\n}\r\n\r\nconst FavouritePosts = () => {\r\n    const defaultKeyName = \"FavPost\";\r\n    let postUrls;\r\n    const [urlList, setUrlList] = useState([]);\r\n    const [postList, setPostList] = useState([]);\r\n\r\n    if (storageAvailable('localStorage')) {\r\n        postUrls = localStorage.getItem(defaultKeyName);\r\n        if (postUrls !== null)\r\n        {\r\n            setUrlList(postUrls.split(\"}{\"));\r\n        }\r\n    }\r\n    else {\r\n        Window.alert(\"LocalStorage is not available.\");\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <PostList \r\n            postList={postList}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FavouritePosts;"]},"metadata":{},"sourceType":"module"}